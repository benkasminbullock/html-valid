[% start_year=2012 %]
[% MACRO example(file) BLOCK %]
[%- pl = file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://api.metacpan.org/source/BKB/[% info.name %]-[% info.version %]/examples/[% pl %]> in the distribution.)
[% END %]
=encoding UTF-8

=head1 NAME

HTML::Valid - tidy/validate HTML

=head1 SYNOPSIS

[% INCLUDE "synopsis.pl" | xtidy %]

outputs

[% INCLUDE "synopsis-out.txt" | xtidy %]

[% INCLUDE "version.pod" %]

=head1 DESCRIPTION

Validate/repair HTML. This module is based on L</HTML Tidy>, but not
on the Perl module L<HTML::Tidy>. However, you do not need to install
HTML Tidy before installing this, because the library is contained in
the distribution.

=head1 FUNCTIONS

=head2 new

    my $htv = HTML::Valid->new ();

Make a new HTML::Valid object.

It's also possible to supply options, as described in L</OPTIONS>:

    $htv->new (
        show_body_only => 1,
        alt_text => 'An image of a polar bear',
    );

=head2 run

    my ($output, $errors) = $htv->run ($content);

Get the tidy HTML output and errors. This is basically the same thing
as running the "tidy" utility with the given options.

=head2 set_filename

    $htv->set_filename ('file.html');

Set the file name for error reporting to F<file.html>.

=head2 set_option

    $htv->set_option ('omit-optional-tags', 1);

Most of the options of L</HTML Tidy> are supported.

=head1 OPTIONS

The following options can be set with L</set_option>. In this
documentation they are given with a hyphen, but underscores can also
be used. Options taking true or false values test for truth or
falsehood using the standard Perl tests, so empty strings, the
undefined value, or zero are all valid "false" values.

Please note the following documentation of the options is
automatically extracted from the L</HTML Tidy> documentation.

=over

[% INCLUDE "options.pod" %]

=back

=head1 SCRIPT

There are two scripts, "htmlok", which runs on files or URLs and
prints errors found to standard output, and "htmltidy", which runs on
files or URLs and prints the reformatted HTML to standard output, with
errors going to standard error. To use these scripts with URL
validation, you need to have L<Data::Validate::URI> and L<LWP::Simple>
installed.

=head1 SEE ALSO

[% INCLUDE "html-tidy.pod" %]

[% INCLUDE "html-standards.pod" %]

=head2 Online HTML validators

You may like to try these validators for checking your HTML.

=over

=item L<http://www.onlinewebcheck.com/>

Commercial HTML validator.

=item L<http://watson.addy.com/>

=item L<https://validator.w3.org/>

W3 Consortium validator.

=item L<https://validator.w3.org/nu/>

New W3 Consortium validator.

=back

=head2 CPAN modules

=over

=item L<HTML::Tidy>

=item L<HTML::Lint>

=item HTML::Validator

There is another module called HTML::Validator, but it can only found
on Backpan, dating from 2000. It uses an external XML validating tool.

=back

=head2 Other

=over

=item L<JWZ's validate script|https://www.jwz.org/hacks/validate.pl>

From the documentation:

=over

A small HTML validator: really all this does is make sure your tags are balanced, that your tables aren't missing TRs around the TDs, and that the local files that any relative URLs point to exist. There are much more fully-featured validators out there, but I haven't found them very useful: when all I want to know is "you left out a </UL>", they tend to spend their time whining at me about "where's your DTD?" and similar nonsense.

=back

=back

=head1 BUILD PROCESS

This module is built from L</HTML Tidy> source code using a script
which converts the HTML Tidy library into a single C file. This is
available in the github repository as F<tools/make-c-file.pl>, but is
not included in the CPAN distribution. This also includes extra C
functions in F<extra.c> into the library to access internals which are
not part of the public interface. This is used for creating the
machine-readable file of option documentation included above in
L</OPTIONS> and for creating the tables of tags and attributes in
L<HTML::Valid::Tagset>.

As someone who's previously released two modules depending on
third-party libraries, L<Image::PNG::Libpng> and L<Gzip::Faster>, I've
had to deal with a lot of problems caused by incompatibilities,
libraries not found, unknown compilation options, and other things
which are on other people's computers, and completely beyond my
control, and often highly mysterious. Based on that experience, and
taking a hint from the SQLite project and from the L<DBD::SQLite> Perl
module, I decided to go down the path of making a single C file from
HTML Tidy, based on a fixed version, and including that in the Perl
distribution, so that I can have some hope of fixing whatever issues
happen in compiling the library, and so that if other people want to
use this module, they won't have to suffer through trying to install
yet another library.

=head1 SUPPORT

If you have a problem with this module, although it's based on L</HTML
Tidy>, please report it via this Perl module's issues page first,
since, although this is not a fork of HTML Tidy, it's possible that
some part of the build process (see L</BUILD PROCESS>) has caused the
issue rather than the HTML Tidy library itself. Also note that the
version of L</HTML Tidy> used to build this is going to be the stable
version released by the project, and thus will lag behind the most
current version on github. Hence some of the issues with this module
may already have been reported or even fixed in the most current
branch.

=head1 AUTHOR

Ben Bullock <bkb@cpan.org>

=head1 COPYRIGHT AND LICENCE

[% INCLUDE "html-tidy-copyright" %]

[% INCLUDE "html-valid-author.pod.tmpl" %]
