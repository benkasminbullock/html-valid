[% MACRO repo(file) BLOCK -%]
L<F<[% file %]>|[% info.repo %]/blob/[% commit.commit %]/[% file %]>
[%- END %]
[% MACRO example(file) BLOCK %]
[%- pl = file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

(This example is included as L<F<[% pl %]>|https://fastapi.metacpan.org/source/BKB/[% info.name %]-[% info.version %]/examples/[% pl %]> in the distribution.)
[% END %]
=encoding UTF-8

=head1 NAME

HTML::Valid - tidy/validate HTML

=head1 SYNOPSIS

[% INCLUDE "synopsis.pl" | xtidy %]

outputs

[% INCLUDE "synopsis-out.txt" | xtidy %]

[% INCLUDE "version.pod" %]

=head1 DESCRIPTION

Validate/repair HTML. This module is based on L</HTML Tidy>, but not
on the Perl module L<HTML::Tidy>. However, you do not need to install
HTML Tidy before installing this, because the library is contained in
the distribution.

=head1 FUNCTIONS

=head2 new

    my $htv = HTML::Valid->new ();

Make a new HTML::Valid object.

It's also possible to supply options, as described in L</OPTIONS>:

    $htv->new (
        show_body_only => 1,
        alt_text => 'An image of a polar bear',
    );

=head2 run

    my ($output, $errors) = $htv->run ($content);

Get the tidy HTML output and errors. This is basically the same thing
as running the "tidy" utility with the given options.

=head2 set_filename

    $htv->set_filename ('file.html');

Set the file name for error reporting to F<file.html>.

=head2 set_option

    $htv->set_option ('omit-optional-tags', 1);

Most of the options of L</HTML Tidy> are supported.

=head1 OPTIONS

The following options can be set with L</set_option>. In this
documentation they are given with a hyphen, but underscores can also
be used. Options taking true or false values test for truth or
falsehood using the standard Perl tests, so empty strings, the
undefined value, or zero are all valid "false" values.

Please note the following documentation of the options is
automatically extracted from the L</HTML Tidy> documentation.

=over

[% INCLUDE "options.pod" %]

=back

(The above options were generated from the documentation of HTML Tidy
5.1.25, so they may be outdated relative to the current version.)

=head1 SCRIPT

There are two scripts, "htmlok", which runs on files or URLs and
prints errors found to standard output, and "htmltidy", which runs on
files or URLs and prints the reformatted HTML to standard output, with
errors going to standard error. To use these scripts with URL
validation, you need to have L<Data::Validate::URI> and L<LWP::Simple>
installed.

=head1 SEE ALSO

[% INCLUDE "html-tidy.pod" %]

[% INCLUDE "html-standards.pod" %]

=head2 Online HTML validators

You may like to try these validators for checking your HTML.

=over

=item L<http://www.onlinewebcheck.com/>

Commercial HTML validator.

=item L<http://watson.addy.com/>

=item L<https://validator.w3.org/>

W3 Consortium validator.

=item L<https://validator.w3.org/nu/>

New W3 Consortium validator.

=back

=head2 CPAN modules
[% star = "‚≠ê" %] 
[% MACRO cpm(module) BLOCK %]
=item L<[% module %]>
[% IF mod2info.defined(module) %]
[% info = mod2info.$module %]
[
[%- IF info.log_fav > 0 -%]
[% star.repeat(info.log_fav) %] [% END -%]
Author: L<[% info.author %]|https://metacpan.org/author/[% info.author %]>; Date: C<[% info.date %]>; Version: C<[% info.version %]>]
[% END %]
[% END %]

=over

[% cpm('Alien::TidyHTML5') %]

[% cpm('HTML::Lint') %]

[% cpm('HTML::Normalize') %]

[% cpm('HTML::T5') %]

[% cpm('HTML::Tagset') %]

[% cpm('HTML::Tidy') %]

[% cpm('HTML::Tidy5') %]

=item HTML::Validator

There is another module called HTML::Validator, but it can only be
found on Backpan, dating from 2000. It uses an external XML validating
tool. See L<http://backpan.perl.org/authors/id/S/SA/SAIT/>.

=back

=head2 Other

=over

=item L<JWZ's validate script|https://www.jwz.org/hacks/validate.pl>

From the documentation:

=over

A small HTML validator: really all this does is make sure your tags are balanced, that your tables aren't missing TRs around the TDs, and that the local files that any relative URLs point to exist. There are much more fully-featured validators out there, but I haven't found them very useful: when all I want to know is "you left out a </UL>", they tend to spend their time whining at me about "where's your DTD?" and similar nonsense.

=back

=back

=head1 DEPENDENCIES

=over

=item L<JSON::Parse>

This is used to read a file of options

=back

=head1 BUILD PROCESS

This module is built from L</HTML Tidy> source code using a script
which converts the HTML Tidy library into a single C file. This is
available in the github repository as [% repo("tools/make-c-file.pl")
%], but is not in the CPAN distribution. This also includes extra C
functions in [% repo("extra.c") %] into the library to access
internals which are not part of the public interface. This is used for
creating the machine-readable file of option documentation included
above in L</OPTIONS> and for creating the tables of tags and
attributes in L<HTML::Valid::Tagset>.

=head1 AUTHOR

Ben Bullock <bkb@cpan.org>

=head1 COPYRIGHT AND LICENCE

[% INCLUDE "html-tidy-copyright" %]

[% INCLUDE "html-valid-author.pod.tmpl" %]
